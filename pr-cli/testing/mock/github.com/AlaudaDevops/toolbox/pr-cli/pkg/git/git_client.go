// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlaudaDevops/toolbox/pr-cli/pkg/git (interfaces: GitClient)

// Package git is a generated GoMock package.
package git

import (
	reflect "reflect"

	git "github.com/AlaudaDevops/toolbox/pr-cli/pkg/git"
	gomock "github.com/golang/mock/gomock"
)

// MockGitClient is a mock of GitClient interface.
type MockGitClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitClientMockRecorder
}

// MockGitClientMockRecorder is the mock recorder for MockGitClient.
type MockGitClientMockRecorder struct {
	mock *MockGitClient
}

// NewMockGitClient creates a new mock instance.
func NewMockGitClient(ctrl *gomock.Controller) *MockGitClient {
	mock := &MockGitClient{ctrl: ctrl}
	mock.recorder = &MockGitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitClient) EXPECT() *MockGitClientMockRecorder {
	return m.recorder
}

// AddLabels mocks base method.
func (m *MockGitClient) AddLabels(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabels", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabels indicates an expected call of AddLabels.
func (mr *MockGitClientMockRecorder) AddLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabels", reflect.TypeOf((*MockGitClient)(nil).AddLabels), arg0)
}

// ApprovePR mocks base method.
func (m *MockGitClient) ApprovePR(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovePR", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApprovePR indicates an expected call of ApprovePR.
func (mr *MockGitClientMockRecorder) ApprovePR(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovePR", reflect.TypeOf((*MockGitClient)(nil).ApprovePR), arg0)
}

// AssignReviewers mocks base method.
func (m *MockGitClient) AssignReviewers(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignReviewers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignReviewers indicates an expected call of AssignReviewers.
func (mr *MockGitClientMockRecorder) AssignReviewers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignReviewers", reflect.TypeOf((*MockGitClient)(nil).AssignReviewers), arg0)
}

// CheckPRStatus mocks base method.
func (m *MockGitClient) CheckPRStatus(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPRStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPRStatus indicates an expected call of CheckPRStatus.
func (mr *MockGitClientMockRecorder) CheckPRStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPRStatus", reflect.TypeOf((*MockGitClient)(nil).CheckPRStatus), arg0)
}

// CheckRunsStatus mocks base method.
func (m *MockGitClient) CheckRunsStatus() (bool, []git.CheckRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRunsStatus")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]git.CheckRun)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckRunsStatus indicates an expected call of CheckRunsStatus.
func (mr *MockGitClientMockRecorder) CheckRunsStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRunsStatus", reflect.TypeOf((*MockGitClient)(nil).CheckRunsStatus))
}

// CheckUserPermissions mocks base method.
func (m *MockGitClient) CheckUserPermissions(arg0 string, arg1 []string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserPermissions", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckUserPermissions indicates an expected call of CheckUserPermissions.
func (mr *MockGitClientMockRecorder) CheckUserPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserPermissions", reflect.TypeOf((*MockGitClient)(nil).CheckUserPermissions), arg0, arg1)
}

// CherryPickCommit mocks base method.
func (m *MockGitClient) CherryPickCommit(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CherryPickCommit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CherryPickCommit indicates an expected call of CherryPickCommit.
func (mr *MockGitClientMockRecorder) CherryPickCommit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CherryPickCommit", reflect.TypeOf((*MockGitClient)(nil).CherryPickCommit), arg0, arg1)
}

// CreateBranch mocks base method.
func (m *MockGitClient) CreateBranch(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockGitClientMockRecorder) CreateBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockGitClient)(nil).CreateBranch), arg0, arg1)
}

// CreatePR mocks base method.
func (m *MockGitClient) CreatePR(arg0, arg1, arg2, arg3 string) (*git.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePR", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*git.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePR indicates an expected call of CreatePR.
func (mr *MockGitClientMockRecorder) CreatePR(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePR", reflect.TypeOf((*MockGitClient)(nil).CreatePR), arg0, arg1, arg2, arg3)
}

// DismissApprove mocks base method.
func (m *MockGitClient) DismissApprove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DismissApprove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DismissApprove indicates an expected call of DismissApprove.
func (mr *MockGitClientMockRecorder) DismissApprove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DismissApprove", reflect.TypeOf((*MockGitClient)(nil).DismissApprove), arg0)
}

// GetComments mocks base method.
func (m *MockGitClient) GetComments() ([]git.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments")
	ret0, _ := ret[0].([]git.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockGitClientMockRecorder) GetComments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockGitClient)(nil).GetComments))
}

// GetCommits mocks base method.
func (m *MockGitClient) GetCommits() ([]git.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommits")
	ret0, _ := ret[0].([]git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommits indicates an expected call of GetCommits.
func (mr *MockGitClientMockRecorder) GetCommits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommits", reflect.TypeOf((*MockGitClient)(nil).GetCommits))
}

// GetLGTMVotes mocks base method.
func (m *MockGitClient) GetLGTMVotes(arg0 []git.Comment, arg1 []string, arg2 bool, arg3 ...string) (int, map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLGTMVotes", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLGTMVotes indicates an expected call of GetLGTMVotes.
func (mr *MockGitClientMockRecorder) GetLGTMVotes(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLGTMVotes", reflect.TypeOf((*MockGitClient)(nil).GetLGTMVotes), varargs...)
}

// GetLabels mocks base method.
func (m *MockGitClient) GetLabels() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockGitClientMockRecorder) GetLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockGitClient)(nil).GetLabels))
}

// GetPR mocks base method.
func (m *MockGitClient) GetPR() (*git.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPR")
	ret0, _ := ret[0].(*git.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPR indicates an expected call of GetPR.
func (mr *MockGitClientMockRecorder) GetPR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPR", reflect.TypeOf((*MockGitClient)(nil).GetPR))
}

// GetRequestedReviewers mocks base method.
func (m *MockGitClient) GetRequestedReviewers() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestedReviewers")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestedReviewers indicates an expected call of GetRequestedReviewers.
func (mr *MockGitClientMockRecorder) GetRequestedReviewers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestedReviewers", reflect.TypeOf((*MockGitClient)(nil).GetRequestedReviewers))
}

// GetReviews mocks base method.
func (m *MockGitClient) GetReviews() ([]git.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviews")
	ret0, _ := ret[0].([]git.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviews indicates an expected call of GetReviews.
func (mr *MockGitClientMockRecorder) GetReviews() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviews", reflect.TypeOf((*MockGitClient)(nil).GetReviews))
}

// GetUserPermission mocks base method.
func (m *MockGitClient) GetUserPermission(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermission", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermission indicates an expected call of GetUserPermission.
func (mr *MockGitClientMockRecorder) GetUserPermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermission", reflect.TypeOf((*MockGitClient)(nil).GetUserPermission), arg0)
}

// MergePR mocks base method.
func (m *MockGitClient) MergePR(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePR", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergePR indicates an expected call of MergePR.
func (mr *MockGitClientMockRecorder) MergePR(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePR", reflect.TypeOf((*MockGitClient)(nil).MergePR), arg0)
}

// PostComment mocks base method.
func (m *MockGitClient) PostComment(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostComment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostComment indicates an expected call of PostComment.
func (mr *MockGitClientMockRecorder) PostComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostComment", reflect.TypeOf((*MockGitClient)(nil).PostComment), arg0)
}

// RebasePR mocks base method.
func (m *MockGitClient) RebasePR() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebasePR")
	ret0, _ := ret[0].(error)
	return ret0
}

// RebasePR indicates an expected call of RebasePR.
func (mr *MockGitClientMockRecorder) RebasePR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebasePR", reflect.TypeOf((*MockGitClient)(nil).RebasePR))
}

// RemoveLabels mocks base method.
func (m *MockGitClient) RemoveLabels(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabels", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLabels indicates an expected call of RemoveLabels.
func (mr *MockGitClientMockRecorder) RemoveLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabels", reflect.TypeOf((*MockGitClient)(nil).RemoveLabels), arg0)
}

// RemoveReviewers mocks base method.
func (m *MockGitClient) RemoveReviewers(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReviewers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReviewers indicates an expected call of RemoveReviewers.
func (mr *MockGitClientMockRecorder) RemoveReviewers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReviewers", reflect.TypeOf((*MockGitClient)(nil).RemoveReviewers), arg0)
}
