# golangci-lint configuration for roadmap-planner backend
run:
  timeout: 5m
  issues-exit-code: 1
  tests: true

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true

linters-settings:
  gofmt:
    simplify: true
  goimports:
    local-prefixes: github.com/AlaudaDevops/toolbox/roadmap-planner/backend
  govet:
    enable-all: true
  revive:
    min-confidence: 0.8
  misspell:
    locale: US
  gocyclo:
    min-complexity: 15
  dupl:
    threshold: 100
  goconst:
    min-len: 3
    min-occurrences: 3
  depguard:
    rules:
      main:
        files:
          - $all
        allow:
          - $gostd
          - github.com/AlaudaDevops/toolbox/roadmap-planner/backend
          - github.com/gin-gonic/gin
          - github.com/andygrunwald/go-jira
          - github.com/spf13/viper
          - github.com/trivago/tgo
          - go.uber.org/zap
  lll:
    line-length: 120
  maligned:
    suggest-new: true
  gocognit:
    min-complexity: 20

linters:
  enable:
    - bodyclose
    - deadcode
    - depguard
    - dogsled
    - dupl
    - errcheck
    - exportloopref
    - exhaustive
    - gochecknoinits
    - goconst
    - gocritic
    - gocyclo
    - gofmt
    - goimports
    - revive
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - lll
    - misspell
    - nakedret
    - noctx
    - nolintlint
    - staticcheck
    - structcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - varcheck
    - whitespace
  disable:
    - gochecknoglobals  # Global variables are sometimes necessary
    - gocognit         # Cognitive complexity can be subjective
    - funlen           # Function length can vary based on context

issues:
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
    # Exclude known false positives
    - path: cmd/
      linters:
        - gochecknoinits
  exclude:
    # errcheck: Almost all programs ignore errors on these functions
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked
  exclude-use-default: false
  max-issues-per-linter: 0
  max-same-issues: 0
